<?php


use App\Classes\BuildMeleeMedabot;
use App\Classes\BuildRangedMedabot;
use App\Classes\Parts\RangedMedabotArm;
use App\Classes\Parts\RangedMedabotHead;
use App\Classes\Parts\RangedMedabotLeg;
use App\Classes\RangedMedabot;
use App\Contracts\Medabot;
use App\Contracts\Medal;
use App\Contracts\Part;

class BuildTypeMedabotTest extends \PHPUnit\Framework\TestCase
{
    protected $medabot;
    private $medabotTypes;

    protected function setUp()/* The :void return type declaration that should be here would cause a BC issue */
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        // Which types I need to test.
        $this->medabotTypes = [
            (new BuildRangedMedabot())->build(),
            (new BuildMeleeMedabot())->build()
        ];
    }

    public function testTypes () : void
    {
        foreach ($this->medabotTypes as $type) {
            $this->medabot = $type;

            $this->_testHasParts();
            $this->_testHasDamageSetByFactory();
            $this->_testPartsHaveAName();
        }
    }

    private function _testHasParts ()
    {
        $this->assertInstanceOf(Medabot::class, $this->medabot);

        // We need to test if the returned Medabot
        // has Parts and a Medal. We do this to
        // see if the Medabot has been made in
        // a Factory or not - it automatically
        // gets added in the according Factory.
        $this->assertInstanceOf(Medal::class, $this->medabot->getMedal());

        $this->assertInstanceOf(Part::class, $this->medabot->getHead());
        $this->assertInstanceOf(Part::class, $this->medabot->getArm('left'));
        $this->assertInstanceOf(Part::class, $this->medabot->getArm('right'));
        $this->assertInstanceOf(Part::class, $this->medabot->getLeg('left'));
        $this->assertInstanceOf(Part::class, $this->medabot->getLeg('right'));
    }

    private function _testHasDamageSetByFactory () : void
    {
        // See if we have a Head with damage.
        $head = $this->medabot->getHead();
        $this->assertNotEquals(0, $head->getDamageOutput());

        // See if we have arms with damage.
        $leftArm = $this->medabot->getArm('left');
        $rightArm = $this->medabot->getArm('right');
        $this->assertNotEquals(0, $leftArm->getDamageOutput());
        $this->assertNotEquals(0, $rightArm->getDamageOutput());

        // See if we have legs with damage.
        $leftLeg = $this->medabot->getLeg('left');
        $rightLeg = $this->medabot->getLeg('right');
        $this->assertNotEquals(0, $leftLeg->getDamageOutput());
        $this->assertNotEquals(0, $rightLeg->getDamageOutput());
    }

    private function _testPartsHaveAName () : void
    {
        // See if we have a Head with damage.
        $parts = [
            $this->medabot->getHead(),
            $this->medabot->getArm('left'),
            $this->medabot->getArm('right'),
            $this->medabot->getLeg('left'),
            $this->medabot->getLeg('right'),
            $this->medabot->getMedal()
        ];

        foreach ($parts as $part) {
            $this->assertNotEquals(true, empty($part->getName()));
        }
    }
}
